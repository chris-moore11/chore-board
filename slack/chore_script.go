package main

import (
	"fmt"
	"strings"
	"net/http"
	"io/ioutil"
	"cmoore/chore-board/db"
	"cmoore/chore-board/graph/model"
)

// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

// curl -X POST -F channel= -F text="Reminder: we've got a softball game tonight" https://slack.com/api/chat.postMessage -H "Authorization: Bearer …”
func main() {
	

	db.ConnectDB()
	defer db.GlobalInstance.Close()

	users := getUsers()
	chores := getChores()

	var messageTextString string
	for _, chore := range chores {
		slackNames := getUserSlackNamesWithChoreId(users, chore.ID)
		messageTextString = messageTextString + chore.Text + ": " + strings.Join(slackNames[:], ",") + "\n"
	}

	payload := strings.NewReader("channel=C04C7A0GMMM&text=" + messageTextString)
	req, err := http.NewRequest("POST", "https://slack.com/api/chat.postMessage", payload)
	if err != nil {
		// handle err
	}
	req.Header.Add("content-type", "application/x-www-form-urlencoded")
	req.Header.Set("Authorization", "Bearer xoxb-2249374623846-4429852606370-xsn72OzFzuQusybdP0fg3yfl")

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		fmt.Println("error");
	}
	body, _ := ioutil.ReadAll(resp.Body)

	fmt.Println(string(body))
}

func getUsers() ([]*model.User) {
	var (
		id      int
		name string
		email   string
		demerits int
		choreId int
		admin bool
	)

	rows, err := db.GlobalInstance.Query("SELECT * FROM users")
	if err != nil {
		panic(err)
	}
	defer rows.Close()

	var users []*model.User

	for rows.Next() {
		err := rows.Scan(&id, &name, &email, &demerits, &choreId, &admin)
		if err != nil {
			panic(err)
		}
		user := &model.User{ID: id, Name: name, Email: email, Demerits: demerits, ChoreID: choreId, Admin: admin}
		users = append(users, user)
	}

	return users
}

func getChores() ([]*model.Chore) {
	var (
		id          int
		text        string
		done        bool
		description string
		image       string
	)
	rows, err := db.GlobalInstance.Query("SELECT * FROM chores")
	if err != nil {
		panic(err)
	}
	defer rows.Close()

	var chores []*model.Chore

	for rows.Next() {
		err := rows.Scan(&id, &text, &done, &description, &image)
		if err != nil {
			panic(err)
		}
		chore := &model.Chore{ID: id, Text: text, Done: done, Description: description, Image: image}
		chores = append(chores, chore)
	}
	err = rows.Err()
	if err != nil {
		panic(err)
	}

	fmt.Println(chores[0].Text)

	return chores
}


// i used the 'email' field in the DB for storing Slack names... shoot me
func getUserSlackNamesWithChoreId(users []*model.User, choreId int) ([]string) {
	var userSlackNamesWithChoreId []string
	for _, user := range users {
		if user.ChoreID == choreId {
			userSlackNamesWithChoreId = append(userSlackNamesWithChoreId, "<@" + "cpmoore1996>")
		}
	}
	fmt.Println(userSlackNamesWithChoreId)
	return userSlackNamesWithChoreId
}
